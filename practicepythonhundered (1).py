# -*- coding: utf-8 -*-
"""practicePythonHundered.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qTIvSRtkn5SnKVjDmXNx32oVJ2BV5lz

# **15th October, 2025**

# **EASY LEVEL (25 QUESTIONS)**

**1. Write a program to find the factorial of a number using recursion.**
"""

def factorial(num):
  if num == 0 or num == 1:
    return 1
  elif num > 1:
    return num * factorial(num-1)
  else:
    print("Please Enter a valid number")

factorial(5)

# now without recursion
def factorial2(num2):
  if num2 == 0 or num2 == 1:
    return 1
  fact = 1
  while num2 > 1:

    fact *= num2

    num2 = num2-1
  return fact

factorial2(5)

"""**2.	Print the Fibonacci sequence up to n terms.**"""

def fibonacci(n):
    seq = [0, 1]
    for i in range(2, n):
      seq.append(seq[-1] + seq[-2])
    return seq

fibonacci(6)

def fibonacci2(n2):
  a = 0
  b = 1
  for i in range(n2):
    print(a, end=" ")
    temp = a
    a = b
    b = temp+b

fibonacci2(6)

"""**3.	Check if a number is prime or not.**"""

def primeCheck(n):
  c = 0
  if n == 0 or n == 1:
    print("Not a prime Number")

  else:
    for i in range(1,n+1):
      if n % i == 0:
        c += 1
      else:
        c = c

  if c == 2:
    print("Prime Number")
  else:
    print("Not Prime")

primeCheck(11)

"""**4.	Reverse a string without using slicing.**"""

def reverseString(myString):
  revStr = ''
  for i in range(len(myString)-1,-1,-1):
    revStr += myString[i]
  return revStr
reverseString("Abubakar")

def reverseString2(myString2):
  return "".join(reversed(myString2))

reverseString2("Abubakar")

"""**5.	Find the largest element in a list.**"""

def largest(arr):
  max = arr[0]
  for i in range(len(arr)):
    if arr[i] > max:
      max = arr[i]
  return max

largest([11,2,3,4,44,7,8,9,44])

"""**6.	Count vowels and consonants in a string.**"""

def countVowelConsonants(myStr):
  vowel = 'aeiou'
  vowelCount = 0
  consCount = 0
  for i in range(len(myStr)):
    if myStr[i].lower() in vowel:
      vowelCount +=1
    else:
      consCount +=1

  return str(vowelCount) + ' vowels and ' + str(consCount) + ' consonants'

countVowelConsonants('Uyair')

"""**7.	Print multiplication table of any number.**"""

def multiplicationTable(n,start,end):
  for i in range(start,end+1):
    print(n , " x " ,i, " = " ,n*i)

multiplicationTable(6,5,10)

"""**8.	Check if a string is a palindrome.**"""

def palindrome(myStr):
  revStr = "".join(reversed(myStr))

  if revStr.lower() == myStr.lower():
    print("Palindrome")
  else:
    print("No Palindrom")

palindrome("Dad")

"""**9.	Find the second largest number in a list.**"""

def secondLargest(arr):
  max = float('-inf')
  secondMax = float('-inf')
  for i in range(len(arr)):
    if max < arr[i]:
      secondMax = max
      max = arr[i]
    elif secondMax < arr[i] and secondMax < max:
      secondMax = arr[i]

  return max, secondMax

secondLargest([1111,11123,342,12,123,11,122,1])

"""**10.	Merge two lists and remove duplicates.**"""

def mergeTwoList(arr1,arr2):
  return arr1+arr2

mergeTwoList([1,2,3,4],[3,21,121,12])

def mergeTwoList2(arr1,arr2):
  arr1.extend(arr2)
  return arr1

mergeTwoList2([1,2,3,4],[3,21,121,12])

def mergeTwoList2(arr1,arr2):
  c = [*arr1, *arr2]
  return c

mergeTwoList2([1,2,3,4],[3,21,121,12])

def mergerList(arr1, arr2):
  mergArr = []
  for i in arr1:
    mergArr.append(i)
  for j in arr2:
    mergArr.append(j)

  return mergArr

mergerList([1,2321,213,1321,1213,1],[1,23,5,4,5,7,7,8])

"""**11.	Count frequency of each element in a list.**"""

def frequencyCount(arr):
  freq = dict()
  for i in range(len(arr)):
    count = 0
    for j in range(len(arr)):
      if arr[i] == arr[j]:
        count +=1
    freq[arr[i]] = count

  return freq

frequencyCount(['Uzair',1,1,2321,2321,11,12,12,1,5,4,'Uzair','a'])

"""**12.	Sort a list without using the built-in sort() method.**"""

def mySort(arr):
  for i in range(len(arr)):
    min = arr[i]
    idx = i
    c = i
    for j in range(i,len(arr)):
      if arr[j] < min :
        min = arr[j]
        idx = c
      c+=1
    temp = arr[i]
    arr[i] = min
    arr[idx] = temp
  print(arr)

mySort([1,2,1,1,12,3,3,3])

"""**13. Print the sentence backwards, but keep words in the correct order**"""

def backwordSentence(myStr):
  s = myStr.split()
  s.reverse()
  sentence = " ".join(s)
  s2 = ''
  for i in range(len(sentence)-1,-1,-1):
      s2 = s2 + sentence[i]
  return s2

backwordSentence("Hello is")

"""**14. Total number of unique characters in a sentence(ignore spaces)**"""

def noOfUniqueChar(sent):
  uniq = []
  for i in sent.lower():
    if i not in uniq:
      uniq.append(i)

  return len(uniq)

noOfUniqueChar("Uzair")

"""**15.	Convert Celsius to Fahrenheit and vice versa.**"""

def tempConversion():
  tempType = input("Enter the converstion, F for Fahrenheit and C for Celsius: ")
  while tempType.lower() != 'c' and tempType.lower() != 'f':
    print("Please Type Correct!")
    tempType = input("Enter F for Fahrenheit and C for Celsius: ")

  # F → C: (F - 32) * 5/9
  # C → F: (C * 9/5) + 32

  if tempType.lower() == 'c':
    temp = input("Please Enter Temperature in Fahrenheit (°F): ")
    cel = (int(temp) - 32) * 5/9
    print(f"Celsius (°C): {cel}°C")
  elif tempType.lower() == 'f':
    temp = input("Please Enter Temperature in Celsius (°C): ")
    fahr = (int(temp) * 9/5) + 32
    print(f"Fahrenheit (°F): {fahr}°F")


tempConversion()

"""**16.	Swap two numbers without using a third variable.**"""

def swappWithoutOtherVariable(firstName, lastName):
  firstName = firstName + lastName #AbubakarAnsari 14-6
  lastName = firstName[0:len(firstName)-len(lastName)]
  firstName = firstName[len(lastName):]
  print(f"Last Name: {lastName}")
  print(f"First Name: {firstName}")

firstName = "Abubakar"
lastName = "Ansari"
swappWithoutOtherVariable("Uzair","Ansari")
swappWithoutOtherVariable(firstName,lastName)

"""**17.	Find the sum of digits of a number.**"""

def sumOfDigits():
  num = input("Enter a Number: ")
  sum = 0
  for i in range(len(num)):
    sum += int(num[i])

  return sum

sumOfDigits()

"""**18.	Print all even and odd numbers from a list separately.**"""

def sepEvenOdd(arr):
  even = []
  odd = []
  for i in range(len(arr)):
    if arr[i] == 1:
      odd.append(arr[i])
    elif arr[i] % 2 == 0:
      even.append(arr[i])
    else:
      odd.append(arr[i])
  print(f"Even Collection in List: {even}")
  print(f"Odd Collection in List: {odd}")

sepEvenOdd([1,2,3,4,5,6,7,8,9])

"""**19.	Find all numbers divisible by 7 and 5 between 1500 and 2700.**"""

def numberDivisble(start, end):
  listOfNum = []
  for i in range(start, end+1):
    if i % 7 == 0 and i % 5 == 0:
      listOfNum.append(i)

  return listOfNum

numberDivisble(1500,2700)

"""**20.	Create a dictionary from two lists.**"""

def dicCreation (list1, list2):
  myDict = dict()
  for i in range(len(list1)):
    myDict[list1[i]] = list2[i]
  return myDict

dicCreation(["Uzair","Umair","Bilal"],[24,22,17])

"""**21.	Remove all punctuation from a string.**"""

def removePunctuations(myStr):
  punctuations = "!()-[]{};:'\"\\,<>./?@#$%^&*_~"
  cleanText = ""
  for i in myStr:
    if i not in punctuations:
      cleanText+=i
  return cleanText

removePunctuations("!()-[]{};:'\"\\,<>./?@#$%^&*_~Uzair")

"""**22.	Find the common elements between two lists.**"""

def findCommons(list1, list2):
  commanList = []
  for i in range(len(list1)):
    for j in range(len(list2)):
      if list1[i] == list2[j]:
       if list1[i] not in commanList:
         commanList.append(list1[i])
      else:
        pass
  return commanList

findCommons([1,3,3,2,5,4],[4,5,5,2])

"""**23.	Calculate the area of a circle given its radius.**"""

import math
def radiusOfCircle (radius):
  # area = πr2 & pi = 3.142
  area = math.pi * (radius**2)
  return round(area,2)

radiusOfCircle(4)

"""**24.	Check if a number is an Armstrong number.**"""

def checkArmstrong(num):
  num = str(num)
  armNum = 0
  for i in str(num):
    armNum += int(i)**len(num)

  if armNum == int(num):
    print(f"{num} is a Armstrong") #153,1634,370,371
  else:
    print(f"{num} is not an Armstrong number")


checkArmstrong(1634)

"""**25.	Count occurrences of a word in a sentence.**"""

def occuranceOfWord(word,sent):
  newSent = sent.lower().split()
  c = 0
  for w in newSent:
    if word.lower() == w:
      c=c+1
    else:
      c=c
  return c
occuranceOfWord("python", "Python is easy to learn and Python is powerful")

"""**26.	Find the smallest missing number in a sorted list.**"""

def smallestMissingNum(sortArr):
  start = sortArr[0]
  for i in range(len(sortArr)):
    expected = start +i
    if sortArr[i] != expected:
          return expected
  return sortArr[-1] + 1

smallestMissingNum([10, 11, 13 ,14, 15, 16])

"""**27.	Print all substrings of a given string.**"""

def subString(myStr):
  for i in range(len(myStr)):
    sub = ""
    for j in range(i,len(myStr)):
      sub += myStr[j]
      print(sub)

subString('Abubakar')

"""# **MEDIUM LEVEL (25 QUESTIONS)**

**28.	Implement a program to find the GCD and LCM of two numbers.**
"""

def GCD(num1,num2):
  listNum1 = []
  listNum2 = []
  for i in range(1,num1+1):
    if num1 % i == 0:
      listNum1.append(i)
  for i in range(1,num2+1):
    if num2 % i == 0:
      listNum2.append(i)

  #approach 1
  # for i in range(len(listNum1)):
  #   if listNum1[i] in listNum2:
  #     comList.append(listNum1[i])

  # approach 2
  # for i in range(len(listNum1)):
  #   for j in range(len(listNum2)):
  #     if listNum1[i] == listNum2[j]:
  #       if listNum1[i] not in comList:
  #         comList.append(listNum1[i])
  #       else:
  #         pass

  # as i already make a function by using approach 2 in problem 22 (easy) which returning
  # the list of common in 2 different list so i am going to use that function
  # becuase function are reusable that why i made the function so now i am going to use my functions findCommons

  common = findCommons(listNum1,listNum2)
  return max(common)

def LCM(num1,num2):
  return (num1 * num2) // GCD(num1,num2)

LCM(12,15)

# approach # 02
def GCD2(num1,num2):
  list1 = [i for i in range(1, num1+1) if num1 % i == 0]
  list2 = [i for i in range(1, num2+1) if num2 % i == 0]
  common2 = list(set(list1) & set(list2))
  return max(common2)

def LCM2(num1,num2):
  return (num1 * num2) // GCD2(num1,num2)

LCM2(12,15)

"""**29.	Find all pairs in an array whose sum is equal to a target number.**"""

def getSumPairs(target, listOfNum):
  sumPairs = []
  for i in range (len(listOfNum)):
    for j in range(i+1,len(listOfNum)):
      if listOfNum[i] + listOfNum[j] == target:
        sumPairs.append((listOfNum[i],listOfNum[j]))

  return sumPairs


getSumPairs(7,[1,2,3,4])

"""**30.	Remove all duplicate characters from a string.**"""

def removeDuplicate(myStr):
  rem = ""
  for i in myStr.lower():
    if i not in rem:
      rem += i
  return rem

removeDuplicate("PrograMming")

"""**31.	Implement a function to flatten a nested list.**"""

def myFlatten(yourList):
  myFlat = []
  for i in yourList:
    if isinstance(i,list):
        myFlat.extend(myFlatten(i))
    else:
      myFlat.append(i)
  return myFlat

myFlatten([[1,2],2,3,4,5,[6,4,[1,2,[11,14]]]])

"""**Tricky Follow Up Task: Write a recursive function that reverses a string without using loops or slicing.**"""

def recRevStr(myStr):
    if len(myStr) <= 1:       # Base case
        return myStr
    return myStr[-1] + recRevStr(myStr[:-1])  # Last char + reversed rest

# Test
print(recRevStr("Python"))  # Output: "nohtyP"

"""**32.	Create a function to count words in a text file.**"""

def wordCountInFile(path):
    with open(path,"r") as file:
      content = file.read()
    return len(content.split())
wordCountInFile("forRead.txt")

"""**33.	Find the intersection and union of two sets without using built-in methods.**"""

def intersectionAndUnion(set1, set2):
    union = set1 | set2            # Union using | operator
    intersect = set1 & set2        # Intersection using & operator
    print(f"Union: {union}")
    print(f"Intersection: {intersect}")

mySet = {1, 2, 3, 2, 6, 4, 5}
mySet1 = {1, 2, 7, 8, 6, 4, 5}
intersectionAndUnion(mySet, mySet1)

# approach2
def intersectionAndUnion2(set1, set2):
  union = {*set1,*set2}
  intersect = set()
  for i in set1:
    for j in set2:
      if i==j:
        intersect.add(i)
  print(f"Union: {union}")
  print(f"Intersection: {intersect}")


mySet = {1, 2, 3,2,6, 4, 5}
mySet1 = {1, 2,7,8,6, 4, 5}
intersectionAndUnion(mySet,mySet1)

"""**35.	Write a Python class for a bank account with deposit and withdraw methods.**"""

class BankAccount:
  def __init__(self,owner,balance):
    self.owner = owner
    self.balance = balance
  def getBalance(self):
     print(f"{self.owner} current Balance is {self.balance}")

  def deposit(self, amount):
    if amount > 0:
      self.balance += amount
      print(f"Amount Deposited: ", amount)
    else:
      print("Insufficient amount or Deposit amount must be positive.")
  def withDraw(self, amount):
    if amount > self.balance:
      print("Insufficient balance")
    elif amount < 0:
      print("Amount Must be more than 0.")
    else:
      self.balance -= amount
      print(f"Amount Withdrawal: ", amount)



account = BankAccount("Abu Bakar",1000)
account1 = BankAccount("Uzair",500)


print(account.owner)
print(account1.owner)
account.getBalance()
account.withDraw(199)
account.getBalance()
account1.getBalance()

student = [
    {"name": "Sara", "age": 20},
    {"name": "Ali", "age": 22},
    {"name": "John", "age": 25}
]

